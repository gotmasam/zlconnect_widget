{"remainingRequest":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\m.ebisu\\Desktop\\zl_connect\\src\\views\\Main.vue?vue&type=template&id=191dbe34&scoped=true","dependencies":[{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\src\\views\\Main.vue","mtime":1661155244000},{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1739441789589},{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1739441789588},{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\babel-loader\\lib\\index.js","mtime":1739441795918},{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1739441802021},{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1739441789589},{"path":"C:\\Users\\m.ebisu\\Desktop\\zl_connect\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1739441797509}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx0cmFuc2l0aW9uIG5hbWU9ImZhZGUiPgogIDxkaXYgdi1pZj0iIWlzTG9hZGVkIiBpZD0ibG9hZGluZy13aW5kb3ciPgogICAgPExvYWRpbmdTcGlubmVyLz4KICA8L2Rpdj4KPC90cmFuc2l0aW9uPgo8ZGl2IGNsYXNzPSJtYWluIGgtMTAwIHctMTAwIGQtZmxleCBmbGV4LWNvbHVtbiI+CiAgPEhlYWRlciByZWY9ImhlYWRlciIgOmJsb2NrX3N0YXR1cz0iYmxvY2tfc3RhdHVzIiA6cmVsb2FkPSJnZXROZXdMSU5FQ2hhdERhdGEiIDpzdXBwb3J0Tm90aWZpY2F0aW9uPSJzdXBwb3J0Tm90aWZpY2F0aW9uIiA6dG9nZ2xlQXV0b1JlbG9hZD0idG9nZ2xlQXV0b1JlbG9hZCIgOnNldEJsb2NrRmxnPSJzZXRCbG9ja0ZsZyIgOmdldEJsb2NrRmxnPSJnZXRCbG9ja0ZsZyI+PC9IZWFkZXI+CiAgPGRpdiBjbGFzcz0iY29udGVudCBkLWZsZXggZmxleC1jb2x1bW4gZmxleC1maWxsIGJvcmRlci10b3AgYm9yZGVyLWJvdHRvbSBvdmVyZmxvdy1hdXRvIiA6Y2xhc3M9InRlcm1pbmFsIiBAc2Nyb2xsPSJoYW5kbGVTY3JvbGwiPgogICAgPGRpdiA6Y2xhc3M9InsnZC1ub25lJzogY2hhdExvZ3MubGVuZ3RoID09IDB9Ij4KICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWFjY2VudCBtdC0yIiBAY2xpY2s9ImdldE9sZExJTkVDaGF0RGF0YSI+6YGO5Y6744OB44Oj44OD44OI44Gu5Y+W5b6XPC9idXR0b24+CiAgICA8L2Rpdj4KICAgIDxCYWxsb29uCiAgICAgIHJlZj0iY29udGVudCIKICAgICAgdi1mb3I9ImNoYXQgaW4gY2hhdExvZ3MiCiAgICAgIHYtYmluZDprZXk9ImNoYXQuY2hhdElkIgogICAgICA6Y2hhdElkPSJjaGF0LmNoYXRJZCIKICAgICAgOnR5cGU9ImNoYXQudHlwZSIKICAgICAgOnNwZWFrZXI9ImNoYXQuc3BlYWtlciIKICAgICAgOm1lc3NhZ2U9ImNoYXQubWVzc2FnZSIKICAgICAgOnVybD0iY2hhdC51cmwiCiAgICAgIDp0aW1lc3RhbXA9ImNoYXQudGltZXN0YW1wIgogICAgICA6aXNGaXJzdExvYWQ9ImNoYXQuaXNGaXJzdExvYWQiCiAgICAgIDppc1ZpZXdEYXRlPSJjaGF0LmlzVmlld0RhdGUiCiAgICAgIDpjb250ZW50U2Nyb2xsPSJjb250ZW50U2Nyb2xsIgogICAgICA6b3BlblByZXZpZXc9Im9wZW5QcmV2aWV3Ij48L0JhbGxvb24+CiAgPC9kaXY+CiAgPEZvb3RlciA6c2VuZENoYXQ9InNlbmRDaGF0Ij48L0Zvb3Rlcj4KICA8UHJldmlldyB2LXNob3c9InByZXZpZXdJbmZvLmlzU2hvdyIgOmNsb3NlUHJldmlldz0iY2xvc2VQcmV2aWV3IiA6Y2xhc3M9InRlcm1pbmFsIiA6dHlwZT0icHJldmlld0luZm8udGFnIiA6c3JjPSJwcmV2aWV3SW5mby5zcmMiIC8+CiAgPCEtLSDjgqLjg6njg7zjg4jooajnpLogLS0+CiAgPGRpdiBpZD0iYWxlcnQtd3JhcHBlciI+CiAgICA8dHJhbnNpdGlvbi1ncm91cCBuYW1lPSJhbGVydC1mYWRlIiB0YWc9IkFsZXJ0IiBjbGFzcz0idy03NSI+CiAgICAgIDxkaXYgdi1mb3I9IihhbGVydENvbmZpZywgaW5kZXgpIGluIGFsZXJ0TGlzdCIgOmtleT0iaW5kZXgiIGNsYXNzPSJ3LTEwMCI+CiAgICAgICAgPEFsZXJ0IDpjbGFzcz0iaW5kZXgiIDp0eXBlPSJhbGVydENvbmZpZy50eXBlIiA6bXNnPSJhbGVydENvbmZpZy5tc2ciIC8+CiAgICAgIDwvZGl2PgogICAgPC90cmFuc2l0aW9uLWdyb3VwPgogIDwvZGl2PgogIDwhLS0g5paw6KaP44Oh44OD44K744O844K46YCa55+lIC0tPgogIDxkaXYgdi1pZj0ibmV3TWVzc2FnZUNvdW50ID4gMCIgaWQ9Im5ldy1tZXNzYWdlLWJ1dHRvbi13cmFwcGVyIj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tc20iIEBjbGljaz0ic2Nyb2xsQm90dG9tIj57eyBuZXdNZXNzYWdlQ291bnQgfX3ku7bjga7mlrDopo/jg6Hjg4Pjgrvjg7zjgrg8L2J1dHRvbj4KICA8L2Rpdj4KPC9kaXY+Cg=="},{"version":3,"sources":["C:\\Users\\m.ebisu\\Desktop\\zl_connect\\src\\views\\Main.vue"],"names":[],"mappings":"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","file":"C:/Users/m.ebisu/Desktop/zl_connect/src/views/Main.vue","sourceRoot":"","sourcesContent":["<template>\n<transition name=\"fade\">\n  <div v-if=\"!isLoaded\" id=\"loading-window\">\n    <LoadingSpinner/>\n  </div>\n</transition>\n<div class=\"main h-100 w-100 d-flex flex-column\">\n  <Header ref=\"header\" :block_status=\"block_status\" :reload=\"getNewLINEChatData\" :supportNotification=\"supportNotification\" :toggleAutoReload=\"toggleAutoReload\" :setBlockFlg=\"setBlockFlg\" :getBlockFlg=\"getBlockFlg\"></Header>\n  <div class=\"content d-flex flex-column flex-fill border-top border-bottom overflow-auto\" :class=\"terminal\" @scroll=\"handleScroll\">\n    <div :class=\"{'d-none': chatLogs.length == 0}\">\n      <button class=\"btn btn-outline-accent mt-2\" @click=\"getOldLINEChatData\">過去チャットの取得</button>\n    </div>\n    <Balloon\n      ref=\"content\"\n      v-for=\"chat in chatLogs\"\n      v-bind:key=\"chat.chatId\"\n      :chatId=\"chat.chatId\"\n      :type=\"chat.type\"\n      :speaker=\"chat.speaker\"\n      :message=\"chat.message\"\n      :url=\"chat.url\"\n      :timestamp=\"chat.timestamp\"\n      :isFirstLoad=\"chat.isFirstLoad\"\n      :isViewDate=\"chat.isViewDate\"\n      :contentScroll=\"contentScroll\"\n      :openPreview=\"openPreview\"></Balloon>\n  </div>\n  <Footer :sendChat=\"sendChat\"></Footer>\n  <Preview v-show=\"previewInfo.isShow\" :closePreview=\"closePreview\" :class=\"terminal\" :type=\"previewInfo.tag\" :src=\"previewInfo.src\" />\n  <!-- アラート表示 -->\n  <div id=\"alert-wrapper\">\n    <transition-group name=\"alert-fade\" tag=\"Alert\" class=\"w-75\">\n      <div v-for=\"(alertConfig, index) in alertList\" :key=\"index\" class=\"w-100\">\n        <Alert :class=\"index\" :type=\"alertConfig.type\" :msg=\"alertConfig.msg\" />\n      </div>\n    </transition-group>\n  </div>\n  <!-- 新規メッセージ通知 -->\n  <div v-if=\"newMessageCount > 0\" id=\"new-message-button-wrapper\">\n    <button class=\"btn btn-sm\" @click=\"scrollBottom\">{{ newMessageCount }}件の新規メッセージ</button>\n  </div>\n</div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, onBeforeUnmount, watchEffect } from 'vue';\nimport { useRouter } from 'vue-router';\n\nimport ZohoLINE from '../lib/ZohoLINE.js';\n\nimport Header from '../components/Header.vue';\nimport Balloon from '../components/Balloon.vue';\nimport Footer from '../components/Footer.vue';\n\nimport Preview from '../components/Preview.vue';\nimport LoadingSpinner from '../components/LoadingSpinner.vue';\nimport Alert from '../components/Alert.vue';\n\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/ja';\ndayjs.locale('ja');\n\nexport default {\n  name: 'Main',\n  components: {\n    Header,\n    Balloon,\n    Footer,\n    LoadingSpinner,\n    Preview,\n    Alert\n  },\n  setup() {\n    console.log(\"setup\");\n    const USER_TYPE_OBJ = {\n      0: \"right\",\n      1: \"left\"\n    };\n    const CHAT_TYPE_OBJ = {\n      0: \"text\",\n      1: \"sticker\",     // スタンプ\n      2: \"image\",       // 画像\n      3: \"video\",       // 動画\n      4: \"audio\",       // 音声\n      5: \"application\"  // PDF\n    };\n    const AUTO_RELOAD_INTERVAL = 1 * 1000;\n    // ZohoLINEクラス\n    let ZLC = null;\n    // Zohoプラグイン\n    const ZOHO = window.ZOHO;\n    // vue-router\n    const router = useRouter();\n    // 読み込みフラグ\n    const isLoaded = ref(false);\n    // Zoho CRMログインユーザーデータ\n    const currentUser = ref(\"\");\n    // Zohoレコードデータ\n    const lineUserData = ref(\"\");\n    // 顧客ID\n    const lineUserId = ref(\"\");\n    // LINEチャットログ\n    const chatLogs = ref([]);\n    //LINE既読時間\n    const last_read_time = ref(\"0\");\n    //取得した一番古いLINEチャットの時間\n    const oldest_chat_time = ref(dayjs().format(\"YYYY-MM-DD HH:mm:ss.SSS\"));\n    // ZohoLINEの契約企業ID\n    const companyId = ref('');\n    // ZohoLINEのチャンネルID\n    const channelId = ref('');\n    // ZohoLINEのAPIキー\n    const apiKey = ref('');\n    //ヘッダーのDOM\n    const header = ref(null);\n    //チャット表示エリアのDOM\n    const content = ref(null);\n    //チャット表示エリアのスクロール位置\n    const contentScrollPosition = ref(null);\n    //スクロール位置が一番下であるか\n    const isBottomScrollPosition = ref(null);\n    // 最初のチャットデータ取得フラグ\n    const isFirstGetChatData = ref(true);\n    // 自動更新を行うsetIntervalのID\n    const autoReloadId = ref(null);\n    // 自動更新の自動停止時間(自動更新開始から６時間後に自動停止) dayjsオブジェクト\n    const autoReloadLimitTime = ref(null);\n    // 端末の識別用変数\n    const terminal = ref(\"pc\");\n    // アラート表示用変数\n    const alertList = ref([]);\n    // コンテンツプレビュー用変数\n    const previewInfo = reactive({\n      isShow: false,\n      tag: \"img\",\n      src: \"\"\n    });\n    // 新規メッセージ未表示件数\n    const newMessageCount = ref(0);\n    // ブロックフラグ\n    const block_status = ref(false);\n\n    watchEffect(\n      () => {\n        contentScroll();\n      },\n      {\n        flush: 'post'\n      }\n    );\n\n    onMounted(async () => {\n      console.log(\"onMounted\");\n      const appElement = document.getElementById(\"app\");\n      getTerminal();\n      window.addEventListener('resize', getTerminal);\n      //Zohoプラグインの初期化完了時\n      ZOHO.embeddedApp.on(\"PageLoad\", (data) => {\n        appElement.classList.add('loaded');\n        appElement.dataset.entity = data.Entity;\n        appElement.dataset.entityId = data.EntityId;\n        // ZohoLINEの必要なデータの取得\n        initialize(data);\n      });\n      //Zohoプラグインの初期化\n      ZOHO.embeddedApp.init();\n      if(appElement.classList.contains('loaded')){\n        initialize({\n          Entity: appElement.dataset.entity,\n          EntityId: appElement.dataset.entityId\n        });\n      }\n    });\n\n    onBeforeUnmount(() => {\n      console.log(\"onBeforeUnmount\")\n      if(autoReloadId.value != null){\n        clearTimeout(autoReloadId.value);\n        autoReloadId.value = null;\n      }\n      window.removeEventListener('resize', getTerminal);\n    });\n\n    const initialize = async (data) => {\n      try {\n        isFirstGetChatData.value = true;\n        //LINEユーザーデータの取得\n        lineUserData.value = await getZohoCustomerId(data.Entity, data.EntityId);\n        lineUserId.value = lineUserData.value.LINE_ID;\n        // ZohoLINEのAPIキーの取得\n        const zohoLineConfig = await getZohoCRMVariables({apiKeys:[\"zoho_line_api_key\", \"zoho_line_company_id\", \"zoho_line_channel_id\"]});\n        if(zohoLineConfig.zoho_line_company_id.value){\n          companyId.value = zohoLineConfig.zoho_line_company_id.value;\n        }else{\n          throw new Error(\"契約企業IDが見つかりませんでした\");\n        }\n        if(zohoLineConfig.zoho_line_api_key.value){\n          apiKey.value = zohoLineConfig.zoho_line_api_key.value;\n        }else{\n          throw new Error(\"ZohoLINE APIキーが見つかりませんでした\");\n        }\n        if(zohoLineConfig.zoho_line_channel_id.value){\n          channelId.value = zohoLineConfig.zoho_line_channel_id.value;\n        }else{\n          throw new Error(\"ZohoLINE チャンネルIDが見つかりませんでした\");\n        }\n        ZLC = new ZohoLINE(companyId.value, channelId.value, apiKey.value);\n        // ブロックステータスの取得\n        const userData = await ZLC.getBlockFlg(lineUserId.value);\n        block_status.value = userData.block_status;\n        console.log(\"ブロックステータス：\",block_status.value);\n        currentUser.value = await getCurrentUser();\n        await supportNotification(\"start\");\n        toggleAutoReload(false);\n        toggleAutoReload(true);\n        isLoaded.value = true;\n      } catch (err) {\n        console.error(err);\n        router.push({name: 'Error', params: { message: err.message }});\n      }\n    };\n\n    const sendChat = async (message, type, file=null) => {\n      // メッセージ送信\n      if (type == \"text\") {\n        await ZLC.sendChat(lineUserId.value, message).catch((err) => {\n          console.error(err);\n          if(err.responseJSON.type == \"Remaining\" ){\n            showAlert(\"danger\", \"送信上限数を超えたため、送信に失敗しました。\");\n          } else {\n            showAlert(\"danger\", \"メッセージの送信に失敗しました\");\n          }\n        });\n      // スタンプ送信\n      }else if(type == \"sticker\"){\n        await ZLC.sendStickerChat(lineUserId.value, message).catch((err) => {\n          console.error(err);\n          if(err.responseJSON.type == \"Remaining\" ){\n            showAlert(\"danger\", \"送信上限数を超えたため、送信に失敗しました。\");\n          } else {\n            showAlert(\"danger\", \"スタンプの送信に失敗しました\");\n          }\n        });\n      // 画像送信\n      }else if(type == \"image\"){\n        await ZLC.sendImageChat(lineUserId.value, file).catch((err) => {\n          console.error(err);\n          if(err.responseJSON.type == \"Remaining\" ){\n            showAlert(\"danger\", \"送信上限数を超えたため、送信に失敗しました。\");\n          } else {\n            showAlert(\"danger\", \"画像の送信に失敗しました\");\n          }\n        });\n      // 動画送信\n      }else if(type == \"video\"){\n        await ZLC.sendVideoChat(lineUserId.value, file).catch((err) => {\n          console.error(err);\n          if(err.responseJSON.type == \"Remaining\" ){\n            showAlert(\"danger\", \"送信上限数を超えたため、送信に失敗しました。\");\n          } else {\n            showAlert(\"danger\", \"動画の送信に失敗しました\");\n          }\n        });\n      // 音声送信\n      }else if(type == \"audio\"){\n        await ZLC.sendAudioChat(lineUserId.value, file).catch((err) => {\n          console.error(err);\n          if(err.responseJSON.type == \"Remaining\" ){\n            showAlert(\"danger\", \"送信上限数を超えたため、送信に失敗しました。\");\n          } else {\n            showAlert(\"danger\", \"音声の送信に失敗しました\");\n          }\n        });\n      // PDF送信\n      }else if(type == \"application\"){\n        await ZLC.sendPdfChat(lineUserId.value, file).catch((err) => {\n          console.error(err);\n          if(err.responseJSON.type == \"Remaining\" ){\n            showAlert(\"danger\", \"送信上限数を超えたため、送信に失敗しました。\");\n          } else {\n            showAlert(\"danger\", \"PDFの送信に失敗しました\");\n          }\n        });\n      }\n      isBottomScrollPosition.value = null;\n      // await getNewLINEChatData();\n    };\n\n    // LINE連携済みの顧客IDの取得\n    const getZohoCustomerId = (entity, recordId) => {\n      return new Promise((resolve, reject) => {\n        ZOHO.CRM.API.getRecord({\n          Entity: entity,\n          RecordID: recordId\n        }).then((response) => {\n          // console.log(response);\n          if (response.data && response.data[0]) {\n            resolve(response.data[0]);\n          } else {\n            reject();\n          }\n        }).catch((err) => {\n          reject(err);\n        });\n      });\n    };\n\n    //CRMの変数からZohoLINEのAPIキーを取得\n    const getZohoCRMVariables = (apiName) => {\n      return new Promise((resolve, reject) => {\n        ZOHO.CRM.API.getOrgVariable(apiName).then((response) => {\n          console.log(response);\n          if (response.Success) {\n            resolve(response.Success.Content);\n          } else {\n            reject(response);\n          }\n        }).catch((err) => {\n          console.error(err);\n          reject(err);\n        });\n      });\n    };\n\n    // ログインユーザーデータの取得\n    const getCurrentUser = () => {\n      return new Promise((resolve, reject) => {\n        ZOHO.CRM.CONFIG.getCurrentUser().then((response) => {\n          try{\n            resolve(response.users[0]);\n          }catch(err){\n            console.error(err);\n            reject(err);\n          }\n        }).catch((err) => {\n          console.error(err);\n          reject(err);\n        });\n      });\n    };\n\n    const supportNotification = (type) => {\n      return new Promise((resolve, reject) => {\n        const functionName = \"supportnotification\";\n        const requestData = {\n          arguments: JSON.stringify({\n            type: type,\n            currentUserName: currentUser.value.full_name,\n            contactName: lineUserData.value.Full_Name,\n            contactId: lineUserData.value.id\n          })\n        };\n        ZOHO.CRM.FUNCTIONS.execute(functionName, requestData).then(function(response){\n          resolve(response);\n        }).catch((err) => {\n          console.error(err);\n          reject(err);\n        });\n      });\n    };\n\n    // LINEチャットデータの取得\n    const getLINEChatData = async () => {\n      const lineChatData = await ZLC.getChat(lineUserId.value);\n      // console.log(lineChatData)\n      let lineChatArray = [];\n      for (let chat of lineChatData.chats) {\n        let url = null;\n        if(chat.media_url){\n          // スタンプの場合はアドレスをそのまま指定\n          if(chat.chat_type == 1){\n              url = chat.media_url;\n          // スタンプ以外の場合はS3のパスを取得し指定\n          } else {\n              // url = ZLC.getMedia(chat.media_url)\n              url = ZLC.getMedia(chat.chat_id);\n          }\n        }\n\n        lineChatArray.push({\n          chatId: chat.chat_id,\n          speaker: USER_TYPE_OBJ[chat.user_type],\n          type: CHAT_TYPE_OBJ[chat.chat_type],\n          message: chat.text,\n          // url: chat.media_url ? ZLC.getMediaURL(chat.media_url) : null,\n          // url: chat.media_url ? ZLC.getMedia(chat.media_url) : null,\n          url: url,\n          timestamp: chat.sent_at,\n          isFirstLoad: true\n        });\n        console.log(\"LINE取得\");\n        console.log(chat.sent_at);\n        updateChatReadTime(chat.sent_at);\n      }\n      updateChatLogs(lineChatArray);\n    };\n    // 新規LINEチャットデータの取得\n    const getNewLINEChatData = async () => {\n      const lineChatData = await ZLC.getNewChat(lineUserId.value, last_read_time.value);\n      let lineChatArray = chatLogs.value;\n      for (let chat of lineChatData.chats) {\n        let url = null;\n        if(chat.media_url){\n          // スタンプの場合はアドレスをそのまま指定\n          if(chat.chat_type == 1){\n              url = chat.media_url;\n          // スタンプ以外の場合はS3のパスを取得し指定\n          } else {\n              // url = ZLC.getMedia(chat.media_url)\n              url = ZLC.getMedia(chat.chat_id);\n          }\n        }\n          lineChatArray.push({\n            chatId: chat.chat_id,\n            speaker: USER_TYPE_OBJ[chat.user_type],\n            type: CHAT_TYPE_OBJ[chat.chat_type],\n            message: chat.text,\n            // url: chat.media_url ? ZLC.getMedia(chat.media_url) : null,\n            url: url,\n            timestamp: chat.sent_at,\n            isFirstLoad: false\n          });\n          console.log(\"新規LINE取得\");\n          console.log(chat.sent_at);\n          updateChatReadTime(chat.sent_at);\n      }\n      updateChatLogs(lineChatArray);\n      if(isBottomScrollPosition.value === false){\n        newMessageCount.value = newMessageCount.value + lineChatData.chats.length;\n      }else{\n        newMessageCount.value = 0;\n      }\n    };\n    // 過去LINEチャットデータの取得\n    const getOldLINEChatData = async () => {\n      // チャット取得前のチャット表示エリアの高さを保存\n      contentScrollPosition.value = content.value.$el.parentElement.scrollHeight;\n      // console.log(\"getOldLINEChatData\", contentScrollPosition.value)\n      const lineChatData = await ZLC.getOldChat(lineUserId.value, oldest_chat_time.value, 10);\n      let lineChatArray = chatLogs.value;\n      for (let chat of lineChatData.chats) {\n        let url = null;\n        if(chat.media_url){\n          // スタンプの場合はアドレスをそのまま指定\n          if(chat.chat_type == 4){\n              url = chat.media_url;\n          // スタンプ以外の場合はS3のパスを取得し指定\n          } else {\n              // url = ZLC.getMedia(chat.media_url)\n              url = ZLC.getMedia(chat.chat_id);\n          }\n        }\n        lineChatArray.push({\n          chatId: chat.chat_id,\n          speaker: USER_TYPE_OBJ[chat.user_type],\n          type: CHAT_TYPE_OBJ[chat.chat_type],\n          message: chat.text,\n          // url: chat.media_url ? ZLC.getMedia(chat.media_url) : null,\n          url: url,\n          timestamp: chat.sent_at,\n          isFirstLoad: false\n        });\n        console.log(\"過去LINE取得\");\n        console.log(chat.sent_at);\n        updateChatReadTime(chat.sent_at);\n      }\n      updateChatLogs(lineChatArray);\n    };\n\n    const toggleAutoReload = (isAutoReload) => {\n      console.log(\"toggleAutoReload\");\n      if(isAutoReload && autoReloadId.value == null){\n        // 6時間後に自動更新をオフ\n        autoReloadLimitTime.value = dayjs().add(6, 'h');\n        autoReloadId.value = setInterval(async () => {\n          if(isFirstGetChatData.value){\n            isFirstGetChatData.value = false;\n            await getLINEChatData();\n          }else if(dayjs().isBefore(autoReloadLimitTime.value)){\n            await getNewLINEChatData();\n          }else{\n            header.value.stopAutoReload();\n          }\n        }, AUTO_RELOAD_INTERVAL);\n      }else if(!isAutoReload && autoReloadId.value != null){\n        clearTimeout(autoReloadId.value);\n        autoReloadId.value = null;\n        autoReloadLimitTime.value = null;\n      }\n    };\n    // チャット表示エリアのスクロールハンドル\n    const handleScroll = () => {\n      const target = content.value.$el.parentElement;\n      contentScrollPosition.value = null;\n      if(target.scrollTop + target.clientHeight  == target.scrollHeight){\n        isBottomScrollPosition.value = true;\n        newMessageCount.value = 0;\n      }else{\n        isBottomScrollPosition.value = false;\n      }\n    };\n\n    // chatLogsの更新\n    const updateChatLogs = (lineChatArray) => {\n      chatLogs.value = lineChatArray.sort((x, y) => {\n        if (x.chatId < y.chatId) return -1;\n        if (x.chatId > y.chatId) return 1;\n        return 0;\n      });\n      let sentDate = dayjs(0);\n      chatLogs.value.forEach((chatLog, i) => {\n        if(sentDate.isBefore( dayjs(chatLogs.value[i].timestamp.split(\" \")[0], \"YYYY-MM-DD\"))){\n          sentDate = dayjs(chatLogs.value[i].timestamp.split(\" \")[0], \"YYYY-MM-DD\");\n          chatLogs.value[i].isViewDate = true;\n        }else{\n          chatLogs.value[i].isViewDate = false;\n        }\n      });\n      // console.log(chatLogs)\n    };\n\n    // 新規チャット、過去チャット取得のための時間の更新\n    const updateChatReadTime = (sent_at) => {\n      if (dayjs(oldest_chat_time.value, \"YYYY-MM-DD HH:mm:ss.SSS\").isAfter(dayjs(sent_at, \"YYYY-MM-DD HH:mm:ss.SSS\"))) {\n        oldest_chat_time.value = sent_at;\n      }\n      if (dayjs(last_read_time.value, \"YYYY-MM-DD HH:mm:ss.SSS\").isBefore(dayjs(sent_at, \"YYYY-MM-DD HH:mm:ss.SSS\"))) {\n        last_read_time.value = sent_at;\n      }\n      console.log(oldest_chat_time.value)\n    };\n\n    // LINEチャット表示エリアの自動スクロール\n    // -過去のチャット読み込み時はスクロール位置固定\n    // -最新チャット読み込み時は一番下までスクロール\n    const contentScroll = (isFirstLoad=false) => {\n      if(content.value){\n        const target = content.value.$el.parentElement;\n        setTimeout(() => {\n          if(isFirstLoad){\n            target.scrollTop = target.scrollHeight;\n          }else if(contentScrollPosition.value != null){\n            target.scrollTop = target.scrollHeight - contentScrollPosition.value;\n          }else if(isBottomScrollPosition.value == null || isBottomScrollPosition.value == true){\n            target.scrollTop = target.scrollHeight;\n          }\n        }, 0);\n      }\n    };\n\n    const getTerminal = () => {\n      if(window.outerWidth > window.outerHeight){\n        terminal.value = \"pc\";\n      }else{\n        terminal.value = \"sp\"\n      }\n    };\n\n    const openPreview = (tag, src) => {\n      previewInfo.isShow = true;\n      previewInfo.tag = tag;\n      previewInfo.src = src;\n    };\n\n    const closePreview = () => {\n      previewInfo.isShow = false;\n    };\n\n    const showAlert = (type, msg) => {\n      if(type){\n        alertList.value.push({\n          type: type,\n          msg: msg\n        });\n        setTimeout(function () {\n          alertList.value.shift();\n        }, 2500);\n      }\n    };\n\n    const scrollBottom = () => {\n      if(content.value){\n        const target = content.value.$el.parentElement;\n        target.scrollTop = target.scrollHeight;\n      }\n    };\n\n    const getBlockFlg = async () => {\n      console.log(lineUserId.value);\n      return await ZLC.getBlockFlg(lineUserId.value).catch((err) => {\n          console.error(err);\n      });\n    }\n\n    const setBlockFlg = async () => {\n        console.log(lineUserId.value);\n        block_status.value = !block_status.value;\n        console.log(\"ブロックステータス：\",block_status.value);\n        await ZLC.setBlockFlg(lineUserId.value, block_status.value).catch((err) => {\n          console.error(err);\n        });\n        if(block_status.value){\n          showAlert(\"success\", \"ブロックしました。\");\n        } else {\n          showAlert(\"success\", \"ブロック解除しました。\");\n        }\n    };\n    return {\n      header,\n      content,\n      chatLogs,\n      sendChat,\n      getNewLINEChatData,\n      getOldLINEChatData,\n      toggleAutoReload,\n      contentScroll,\n      handleScroll,\n      isLoaded,\n      terminal,\n      previewInfo,\n      openPreview,\n      closePreview,\n      alertList,\n      showAlert,\n      supportNotification,\n      newMessageCount,\n      scrollBottom,\n      block_status,\n      getBlockFlg,\n      setBlockFlg\n    };\n  }\n}\n</script>\n<style scoped>\n#loading-window {\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  z-index: 9999;\n}\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n.content {\n  background-color: #b0d2ff;\n}\n.alert-fade-enter-active,\n.alert-fade-leave-active {\n  transition: opacity 0.2s ease;\n}\n\n.alert-fade-enter-from,\n.alert-fade-leave-to {\n  opacity: 0;\n}\n#alert-wrapper{\n  width: 100%;\n  max-height: 80%;\n  position: absolute;\n  top: 55px;\n  display: flex;\n  justify-content: center;\n  overflow: hidden;\n  pointer-events: none;\n}\n#new-message-button-wrapper {\n  position: absolute;\n  bottom: 55px;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  right: 0;\n  pointer-events: none;\n}\n#new-message-button-wrapper button {\n  color: #ffffff;\n  background-color: #00000099;\n  pointer-events: auto;\n}\n</style>\n"]}]}